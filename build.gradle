plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'

    // Rest Docs
    id 'org.asciidoctor.jvm.convert' version '3.3.2'

    // SpringDoc OpenAPI (Swagger)
    id 'com.epages.restdocs-api-spec' version '0.17.1'
    id 'org.hidetake.swagger.generator' version '2.18.2'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExt
}

ext {
    snippetsDir = file('build/generated-snippets') // 스니펫 디렉토리 설정
    apiDocsDir = file('build/api-spec') // OpenAPI 스펙 파일 저장 경로
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // Lombok
    implementation 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // MariaDb
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // Actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // Prometheus
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

    // Rest Docs
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    /// SpringDoc OpenAPI (Swagger)
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.17.1'
    swaggerUI 'org.webjars:swagger-ui:4.11.1'
}

tasks.named('test') {
    useJUnitPlatform()
    outputs.dir snippetsDir // 생성된 snippets을 지정된 경로 저장
}

tasks.register('restDocsTest', Test) {
    outputs.dir snippetsDir
    useJUnitPlatform {
        includeTags 'restDocsTest'
    }
}

asciidoctor {
    dependsOn test // test 이후 asciidoctor 실행

    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    baseDirFollowsSourceDir() // 원본 파일 기준으로 작업
}

openapi3 {
    servers = [
            { url = 'http://localhost:8080' },
    ]
    title = 'spring-starter-kit'
    description = 'spring-starter-kit document swagger ui.'
    version = "${project.version}"
    format = 'json'
    outputFileNamePrefix = 'openapi3' // 생성될 스펙 파일의 이름 설정
}

swaggerSources {
    sample {
        inputFile = file("${buildDir}/api-spec/openapi3.json") // OpenAPI 스펙 파일 경로

        ui {
            // Swagger UI 파일들이 생성될 위치를 지정합니다.
            outputDir = file("${buildDir}/swagger-ui")
        }
    }
}

// GenerateSwaggerUI 태스크가 openapi3 태스크에 의존하도록 설정
tasks.named('generateSwaggerUISample', GenerateSwaggerUI) {
    dependsOn 'openapi3'
}

bootJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE // 중복 파일 처리 전략 설정
    dependsOn 'asciidoctor', 'generateSwaggerUISample' // asciidoctor와 Swagger UI 생성 후 실행

    // Swagger UI 파일들을 포함
    from("${buildDir}/swagger-ui") {
        into 'BOOT-INF/classes/static/swagger-ui' // 애플리케이션 내에서 /swagger-ui 경로로 접근 가능
    }

    // OpenAPI 스펙 파일 포함
    from("${buildDir}/api-spec") {
        into 'BOOT-INF/classes/static/swagger-ui' // 스펙 파일을 Swagger UI 디렉토리에 포함
    }

    // Asciidoctor로 생성된 문서 포함
    from("${asciidoctor.outputDir}") {
        into 'BOOT-INF/classes/static/docs' // 애플리케이션 내에서 /docs 경로로 접근 가능
    }
}